package org.xtext.orcasdk.entitymodel.generator.link;

import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.orcasdk.entitymodel.entityModel.AndroidAttribute;
import org.xtext.orcasdk.entitymodel.entityModel.AndroidEntity;
import org.xtext.orcasdk.entitymodel.entityModel.LinkProperties;

@SuppressWarnings("all")
public class CreateEntityLinkProperties {
  public static CharSequence compilelinks(final AndroidAttribute attribute, final AndroidEntity androidEntity, final String packagename) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("//ab hier alles Link ");
    String _name = attribute.getName();
    _builder.append(_name, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* Methode zum Abrufen aller in dieser Entity vorhanden Links vom Typ \"");
    String _name_1 = attribute.getName();
    _builder.append(_name_1, "");
    _builder.append("\".");
    _builder.newLineIfNotEmpty();
    _builder.append("* Hierbei erfolgt keine Anfrage ans Backend. Es werden nur die in dieser Entity vorhandenen ");
    _builder.newLine();
    _builder.append("* Links zurückgegeben.");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @return ArrayList mit allen enthaltenen Links vom angegebenen Typ als");
    _builder.newLine();
    _builder.append("*         String");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public ArrayList<String> getAll");
    String _name_2 = attribute.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_2);
    _builder.append(_firstUpper, "");
    _builder.append("LinksAsString(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return super.getLinksFromSameTypeAsStrings(\"");
    String _name_3 = attribute.getName();
    _builder.append(_name_3, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* NUR BACKEND: Methode zum Abrufen aller Entities vom Orca-Backend, auf die der Link vom Typ \"");
    String _name_4 = attribute.getName();
    _builder.append(_name_4, "");
    _builder.append("\" zeigt. ");
    _builder.newLineIfNotEmpty();
    _builder.append("* BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/links/{linkType}/objects");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abfragen der Ergebnis-EntityPage, des");
    _builder.newLine();
    _builder.append("*            Http-Response-StatusCodes und einer ErrorMessage. Über die");
    _builder.newLine();
    _builder.append("*            EntityPage-Methode getEntities() können alle gefundenen");
    _builder.newLine();
    _builder.append("*            Entites abgerufen werden.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void BACKENDload");
    AndroidEntity _objectType = attribute.getObjectType();
    String _name_5 = _objectType.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_5);
    _builder.append(_firstUpper_1, "");
    _builder.append("sFromBackendBy");
    String _name_6 = attribute.getName();
    String _firstUpper_2 = StringExtensions.toFirstUpper(_name_6);
    _builder.append(_firstUpper_2, "");
    _builder.append("Links(IEntityPageWithEntityCallback<");
    _builder.append(packagename, "");
    _builder.append(".");
    AndroidEntity _objectType_1 = attribute.getObjectType();
    String _name_7 = _objectType_1.getName();
    String _firstUpper_3 = StringExtensions.toFirstUpper(_name_7);
    _builder.append(_firstUpper_3, "");
    _builder.append("> callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("de.fhws.sdk.orca.link.GetAll");
    AndroidEntity _objectType_2 = attribute.getObjectType();
    String _name_8 = _objectType_2.getName();
    String _firstUpper_4 = StringExtensions.toFirstUpper(_name_8);
    _builder.append(_firstUpper_4, "\t");
    _builder.append("sFromLink");
    String _name_9 = attribute.getName();
    String _firstUpper_5 = StringExtensions.toFirstUpper(_name_9);
    _builder.append(_firstUpper_5, "\t");
    _builder.append("BelongsToClass");
    String _replace = packagename.replace(".", "");
    _builder.append(_replace, "\t");
    String _name_10 = androidEntity.getName();
    String _firstUpper_6 = StringExtensions.toFirstUpper(_name_10);
    _builder.append(_firstUpper_6, "\t");
    _builder.append("<");
    AndroidEntity _objectType_3 = attribute.getObjectType();
    String _name_11 = _objectType_3.getName();
    String _firstUpper_7 = StringExtensions.toFirstUpper(_name_11);
    _builder.append(_firstUpper_7, "\t");
    _builder.append("> get = new de.fhws.sdk.orca.link.GetAll");
    AndroidEntity _objectType_4 = attribute.getObjectType();
    String _name_12 = _objectType_4.getName();
    String _firstUpper_8 = StringExtensions.toFirstUpper(_name_12);
    _builder.append(_firstUpper_8, "\t");
    _builder.append("sFromLink");
    String _name_13 = attribute.getName();
    String _firstUpper_9 = StringExtensions.toFirstUpper(_name_13);
    _builder.append(_firstUpper_9, "\t");
    _builder.append("BelongsToClass");
    String _replace_1 = packagename.replace(".", "");
    _builder.append(_replace_1, "\t");
    String _name_14 = androidEntity.getName();
    String _firstUpper_10 = StringExtensions.toFirstUpper(_name_14);
    _builder.append(_firstUpper_10, "\t");
    _builder.append("<");
    _builder.append(packagename, "\t");
    _builder.append(".");
    AndroidEntity _objectType_5 = attribute.getObjectType();
    String _name_15 = _objectType_5.getName();
    String _firstUpper_11 = StringExtensions.toFirstUpper(_name_15);
    _builder.append(_firstUpper_11, "\t");
    _builder.append(">(this.getId(),");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("\"");
    String _name_16 = attribute.getName();
    _builder.append(_name_16, "\t\t");
    _builder.append("\", ");
    _builder.append(packagename, "\t\t");
    _builder.append(".");
    AndroidEntity _objectType_6 = attribute.getObjectType();
    String _name_17 = _objectType_6.getName();
    String _firstUpper_12 = StringExtensions.toFirstUpper(_name_17);
    _builder.append(_firstUpper_12, "\t\t");
    _builder.append(".class, de.fhws.sdk.orca.AppConstants.APPNAME, de.fhws.sdk.orca.AppConstants.APIKEY, callback);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("get.execute();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* NUR BACKEND: Methode zum Abrufen einer ");
    AndroidEntity _objectType_7 = attribute.getObjectType();
    String _name_18 = _objectType_7.getName();
    String _firstUpper_13 = StringExtensions.toFirstUpper(_name_18);
    _builder.append(_firstUpper_13, "");
    _builder.append("Entity vom Orca-Backend anhand des Links vom Typ \"");
    String _name_19 = attribute.getName();
    _builder.append(_name_19, "");
    _builder.append("\".");
    _builder.newLineIfNotEmpty();
    _builder.append("* Die Id der abzurufenden Entity ist anzugeben.");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/links/{type}/{objectId}");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param objectEntityId die Id der ");
    AndroidEntity _objectType_8 = attribute.getObjectType();
    String _name_20 = _objectType_8.getName();
    String _firstUpper_14 = StringExtensions.toFirstUpper(_name_20);
    _builder.append(_firstUpper_14, "");
    _builder.append("Entity die vom Backend abgefragt werden soll");
    _builder.newLineIfNotEmpty();
    _builder.append("* @param callback Callback zum Abrufen der ");
    AndroidEntity _objectType_9 = attribute.getObjectType();
    String _name_21 = _objectType_9.getName();
    String _firstUpper_15 = StringExtensions.toFirstUpper(_name_21);
    _builder.append(_firstUpper_15, "");
    _builder.append("Entity, des Http-StatusCode und der ErrorMessage");
    _builder.newLineIfNotEmpty();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void BACKENDload");
    AndroidEntity _objectType_10 = attribute.getObjectType();
    String _name_22 = _objectType_10.getName();
    String _firstUpper_16 = StringExtensions.toFirstUpper(_name_22);
    _builder.append(_firstUpper_16, "");
    _builder.append("FromBackendBy");
    String _name_23 = attribute.getName();
    String _firstUpper_17 = StringExtensions.toFirstUpper(_name_23);
    _builder.append(_firstUpper_17, "");
    _builder.append("LinkAndObjectEntityId(int objectEntityId, IReturnValueCallback<");
    _builder.append(packagename, "");
    _builder.append(".");
    AndroidEntity _objectType_11 = attribute.getObjectType();
    String _name_24 = _objectType_11.getName();
    String _firstUpper_18 = StringExtensions.toFirstUpper(_name_24);
    _builder.append(_firstUpper_18, "");
    _builder.append("> callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_25 = androidEntity.getName();
    String _firstUpper_19 = StringExtensions.toFirstUpper(_name_25);
    _builder.append(_firstUpper_19, "\t");
    _builder.append("PersistenceWrapper.<");
    _builder.append(packagename, "\t");
    _builder.append(".");
    AndroidEntity _objectType_12 = attribute.getObjectType();
    String _name_26 = _objectType_12.getName();
    String _firstUpper_20 = StringExtensions.toFirstUpper(_name_26);
    _builder.append(_firstUpper_20, "\t");
    _builder.append(">loadObjectEntityByLink(this.getId(), objectEntityId, \"");
    String _name_27 = attribute.getName();
    _builder.append(_name_27, "\t");
    _builder.append("\", ");
    _builder.append(packagename, "\t");
    _builder.append(".");
    AndroidEntity _objectType_13 = attribute.getObjectType();
    String _name_28 = _objectType_13.getName();
    String _firstUpper_21 = StringExtensions.toFirstUpper(_name_28);
    _builder.append(_firstUpper_21, "\t");
    _builder.append(".class, callback);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* NUR BACKEND: Methode zum Anlegen eines neuen Links vom Typ \"");
    String _name_29 = attribute.getName();
    _builder.append(_name_29, "");
    _builder.append("\" im Orca-Backend. Alle");
    _builder.newLineIfNotEmpty();
    _builder.append("* verfügbaren LinkProperties können entsprechend gesetzt werden. ACHTUNG:");
    _builder.newLine();
    _builder.append("* Wird für alle Properties null angegeben, entfällt der LinkPost.");
    _builder.newLine();
    _builder.append("* BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/links/{type}/{objectId}");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param objectEntity die ObjectEntity, auf die der Link zeigen soll");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abruf des Http-statusCode, der angelegten");
    _builder.newLine();
    _builder.append("*            selfURL für diesen Link und eine errorMessage");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void BACKENDsave");
    String _name_30 = attribute.getName();
    String _firstUpper_22 = StringExtensions.toFirstUpper(_name_30);
    _builder.append(_firstUpper_22, "");
    _builder.append("SingleLinkToBackendWithProperties(");
    _builder.append(packagename, "");
    _builder.append(".");
    AndroidEntity _objectType_14 = attribute.getObjectType();
    String _name_31 = _objectType_14.getName();
    String _firstUpper_23 = StringExtensions.toFirstUpper(_name_31);
    _builder.append(_firstUpper_23, "");
    _builder.append(" objectEntity, ");
    {
      EList<LinkProperties> _linkproperties = attribute.getLinkproperties();
      for(final LinkProperties linkprops : _linkproperties) {
        String _type = linkprops.getType();
        String _firstUpper_24 = StringExtensions.toFirstUpper(_type);
        String _plus = (_firstUpper_24 + " ");
        String _name_32 = linkprops.getName();
        String _plus_1 = (_plus + _name_32);
        String _plus_2 = (_plus_1 + ", ");
        _builder.append(_plus_2, "");
      }
    }
    _builder.append(" IPostLinkCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("HashMap<String,Object> properties = new HashMap<String,Object>();");
    _builder.newLine();
    {
      EList<LinkProperties> _linkproperties_1 = attribute.getLinkproperties();
      for(final LinkProperties linkprops_1 : _linkproperties_1) {
        _builder.append("\t");
        _builder.append("if(");
        String _name_33 = linkprops_1.getName();
        _builder.append(_name_33, "\t");
        _builder.append(" != null){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        String _name_34 = linkprops_1.getName();
        String _plus_3 = ("properties.put(\"" + _name_34);
        String _plus_4 = (_plus_3 + "\", ");
        String _name_35 = linkprops_1.getName();
        String _plus_5 = (_plus_4 + _name_35);
        String _plus_6 = (_plus_5 + ");");
        _builder.append(_plus_6, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(properties.size()!=0){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Link link = new Link();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("link.setType(\"");
    String _name_36 = attribute.getName();
    _builder.append(_name_36, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("link.setProperties(properties);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    String _name_37 = androidEntity.getName();
    String _firstUpper_25 = StringExtensions.toFirstUpper(_name_37);
    _builder.append(_firstUpper_25, "\t\t");
    _builder.append("PersistenceWrapper.saveLinkWithPropertiesByEntityIds(this, objectEntity, link, callback);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* NUR BACKEND: Methode zum Updaten der Properties eines Links vom Typ \"");
    String _name_38 = attribute.getName();
    _builder.append(_name_38, "");
    _builder.append("\" im Orca-Backend. Alle");
    _builder.newLineIfNotEmpty();
    _builder.append("* verfügbaren LinkProperties können entsprechend aktualisiert werden. ACHTUNG:");
    _builder.newLine();
    _builder.append("* Wird für alle Properties null angegeben, wird kein Update durchgeführt.");
    _builder.newLine();
    _builder.append("* BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/links/{type}/{objectId}");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param objectEntity die ObjectEntity, auf die der Link zeigen soll");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abruf des Http-statusCode, der angelegten");
    _builder.newLine();
    _builder.append("* selfURL für diesen Link und eine errorMessage");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void BACKENDupdate");
    String _name_39 = attribute.getName();
    String _firstUpper_26 = StringExtensions.toFirstUpper(_name_39);
    _builder.append(_firstUpper_26, "");
    _builder.append("LinkPropertiesAtBackendAndThisObject(");
    _builder.append(packagename, "");
    _builder.append(".");
    AndroidEntity _objectType_15 = attribute.getObjectType();
    String _name_40 = _objectType_15.getName();
    String _firstUpper_27 = StringExtensions.toFirstUpper(_name_40);
    _builder.append(_firstUpper_27, "");
    _builder.append(" objectEntity, ");
    {
      EList<LinkProperties> _linkproperties_2 = attribute.getLinkproperties();
      for(final LinkProperties linkprops_2 : _linkproperties_2) {
        String _type_1 = linkprops_2.getType();
        String _firstUpper_28 = StringExtensions.toFirstUpper(_type_1);
        String _plus_7 = (_firstUpper_28 + " ");
        String _name_41 = linkprops_2.getName();
        String _plus_8 = (_plus_7 + _name_41);
        String _plus_9 = (_plus_8 + ",");
        _builder.append(_plus_9, "");
      }
    }
    _builder.append(" INoReturnValueCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("HashMap<String,Object> properties = new HashMap<String,Object>();");
    _builder.newLine();
    {
      EList<LinkProperties> _linkproperties_3 = attribute.getLinkproperties();
      for(final LinkProperties linkprops_3 : _linkproperties_3) {
        _builder.append("\t");
        _builder.append("if(");
        String _name_42 = linkprops_3.getName();
        _builder.append(_name_42, "\t");
        _builder.append(" != null){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        String _name_43 = linkprops_3.getName();
        String _plus_10 = ("properties.put(\"" + _name_43);
        String _plus_11 = (_plus_10 + "\", ");
        String _name_44 = linkprops_3.getName();
        String _plus_12 = (_plus_11 + _name_44);
        String _plus_13 = (_plus_12 + ");");
        _builder.append(_plus_13, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(properties.size()!=0){");
    _builder.newLine();
    _builder.append("\t");
    String _name_45 = androidEntity.getName();
    String _firstUpper_29 = StringExtensions.toFirstUpper(_name_45);
    _builder.append(_firstUpper_29, "\t");
    _builder.append("PersistenceWrapper.updateSingleLinkProperties(this.getId(), objectEntity.getId(), \"");
    String _name_46 = attribute.getName();
    _builder.append(_name_46, "\t");
    _builder.append("\", properties, this, callback);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* NUR BACKEND: Methode zum Updaten der Properties aller Links vom Typ \"");
    String _name_47 = attribute.getName();
    _builder.append(_name_47, "");
    _builder.append("\" im Orca-Backend. Alle");
    _builder.newLineIfNotEmpty();
    _builder.append("* verfügbaren LinkProperties können entsprechend aktualisiert werden. ACHTUNG:");
    _builder.newLine();
    _builder.append("* Wird für alle Properties null angegeben, wird kein Update durchgeführt.");
    _builder.newLine();
    _builder.append("* BACKEND-ENDPUNKT: api/{appname}/entities/{id}/links/{type}");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param objectEntity die ObjectEntity, auf die der Link zeigen soll");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abruf des Http-statusCode, der angelegten");
    _builder.newLine();
    _builder.append("* selfURL für diesen Link und eine errorMessage");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void BACKENDupdateAll");
    String _name_48 = attribute.getName();
    String _firstUpper_30 = StringExtensions.toFirstUpper(_name_48);
    _builder.append(_firstUpper_30, "");
    _builder.append("LinkPropertiesAtBackendAndThisObject(");
    {
      EList<LinkProperties> _linkproperties_4 = attribute.getLinkproperties();
      for(final LinkProperties linkprops_4 : _linkproperties_4) {
        String _type_2 = linkprops_4.getType();
        String _firstUpper_31 = StringExtensions.toFirstUpper(_type_2);
        String _plus_14 = (_firstUpper_31 + " ");
        String _name_49 = linkprops_4.getName();
        String _plus_15 = (_plus_14 + _name_49);
        String _plus_16 = (_plus_15 + ",");
        _builder.append(_plus_16, "");
      }
    }
    _builder.append(" INoReturnValueCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("HashMap<String,Object> properties = new HashMap<String,Object>();");
    _builder.newLine();
    {
      EList<LinkProperties> _linkproperties_5 = attribute.getLinkproperties();
      for(final LinkProperties linkprops_5 : _linkproperties_5) {
        _builder.append("\t");
        _builder.append("if(");
        String _name_50 = linkprops_5.getName();
        _builder.append(_name_50, "\t");
        _builder.append(" != null){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        String _name_51 = linkprops_5.getName();
        String _plus_17 = ("properties.put(\"" + _name_51);
        String _plus_18 = (_plus_17 + "\", ");
        String _name_52 = linkprops_5.getName();
        String _plus_19 = (_plus_18 + _name_52);
        String _plus_20 = (_plus_19 + ");");
        _builder.append(_plus_20, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(properties.size()!=0){");
    _builder.newLine();
    _builder.append("\t\t");
    String _name_53 = androidEntity.getName();
    String _firstUpper_32 = StringExtensions.toFirstUpper(_name_53);
    _builder.append(_firstUpper_32, "\t\t");
    _builder.append("PersistenceWrapper.updateAllLinkPropertiesOfSameLinkType(this.getId(), \"");
    String _name_54 = attribute.getName();
    _builder.append(_name_54, "\t\t");
    _builder.append("\", this, properties, callback);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* NUR BACKEND: Methode zum Löschen eines Links vom Typ \"");
    String _name_55 = attribute.getName();
    _builder.append(_name_55, "");
    _builder.append("\" im Orca-Backend.");
    _builder.newLineIfNotEmpty();
    _builder.append("* BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/links/{type}/{objectId}");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param objectEntity die ObjectEntity, auf die der Link zeigt");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abruf des Http-statusCode und einer");
    _builder.newLine();
    _builder.append("*            errorMessage");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void BACKENDdeleteSingle");
    String _name_56 = attribute.getName();
    String _firstUpper_33 = StringExtensions.toFirstUpper(_name_56);
    _builder.append(_firstUpper_33, "");
    _builder.append("LinkFromBackendAndThisObject(");
    _builder.append(packagename, "");
    _builder.append(".");
    AndroidEntity _objectType_16 = attribute.getObjectType();
    String _name_57 = _objectType_16.getName();
    String _firstUpper_34 = StringExtensions.toFirstUpper(_name_57);
    _builder.append(_firstUpper_34, "");
    _builder.append(" objectEntity, INoReturnValueCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_58 = androidEntity.getName();
    String _firstUpper_35 = StringExtensions.toFirstUpper(_name_58);
    _builder.append(_firstUpper_35, "\t");
    _builder.append("PersistenceWrapper.deleteSingleLink(this.getId(), objectEntity.getId(), \"");
    String _name_59 = attribute.getName();
    _builder.append(_name_59, "\t");
    _builder.append("\", this, callback);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* NUR BACKEND: Methode zum Löschen ALLER Links vom Typ \"");
    String _name_60 = attribute.getName();
    _builder.append(_name_60, "");
    _builder.append("\" im Orca-Backend, die zu dieser Entity gehören.");
    _builder.newLineIfNotEmpty();
    _builder.append("* BACKEND-ENDPUNKT: api/{appname}/entities/{id}/links/{type}");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param objectEntity die ObjectEntity, auf die der Link zeigt");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abruf des Http-statusCode und einer");
    _builder.newLine();
    _builder.append("*            errorMessage");
    _builder.newLine();
    _builder.append("*/\t");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void BACKENDdeleteAll");
    String _name_61 = attribute.getName();
    String _firstUpper_36 = StringExtensions.toFirstUpper(_name_61);
    _builder.append(_firstUpper_36, "");
    _builder.append("LinksFromBackendAndThisObject(INoReturnValueCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_62 = androidEntity.getName();
    String _firstUpper_37 = StringExtensions.toFirstUpper(_name_62);
    _builder.append(_firstUpper_37, "\t");
    _builder.append("PersistenceWrapper.deleteAllLinkPropertiesOfSameLinkType(this.getId(), \"");
    String _name_63 = attribute.getName();
    _builder.append(_name_63, "\t");
    _builder.append("\", this, callback);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* NUR BACKEND: Methode zum Abfragen aller Links einer Entity von dem LinkType \"");
    String _name_64 = attribute.getName();
    _builder.append(_name_64, "");
    _builder.append("\". Über");
    _builder.newLineIfNotEmpty();
    _builder.append("* das Callback kann eine LinkPage mit den gefundenen Links abgerufen");
    _builder.newLine();
    _builder.append("* werden. BACKEND-ENDPUNKT: api/{appname}/entities/{id}/links/{type}");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abruf der Ergebnis-LinkPage, des");
    _builder.newLine();
    _builder.append("*            Http-statusCode und der errorMessage");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void BACKENDloadAll");
    String _name_65 = attribute.getName();
    String _firstUpper_38 = StringExtensions.toFirstUpper(_name_65);
    _builder.append(_firstUpper_38, "");
    _builder.append("Links(ILinkPageCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_66 = androidEntity.getName();
    String _firstUpper_39 = StringExtensions.toFirstUpper(_name_66);
    _builder.append(_firstUpper_39, "\t");
    _builder.append("PersistenceWrapper.loadAllLinksFromSameTypeOfAnEntity(this, \"");
    String _name_67 = attribute.getName();
    _builder.append(_name_67, "\t");
    _builder.append("\", callback);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//bis hier");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// ab hier die zusätzlichen Methoden");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* BACKEND UND LOKALE DATENBANK: Methode zum Anlegen eines neuen Links vom");
    _builder.newLine();
    _builder.append("* Typ \"");
    String _name_68 = attribute.getName();
    _builder.append(_name_68, "");
    _builder.append("\" im Backend. Wenn die Speicherung im Backend erfolgreich war,");
    _builder.newLineIfNotEmpty();
    _builder.append("* erfolgt ein Update der lokalen Datenbank. ACHTUNG: Ein Update der lokalen");
    _builder.newLine();
    _builder.append("* Datenbank kann nur erfolgen, wenn die Entity, für die diese Methode");
    _builder.newLine();
    _builder.append("* aufgerufen wird, schon in der lokalen DB gespeichert wurde. Sonst erfolgt");
    _builder.newLine();
    _builder.append("* nur eine Speicherung im Backend. Auch wird der gesamte Speichervorgang abgebrochen,");
    _builder.newLine();
    _builder.append("* wenn alle Properties mit null gefüllt werden.");
    _builder.newLine();
    _builder.append("* BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/links/{type}/{objectId}");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param objectEntity Entity auf die Link zeigen soll");
    _builder.newLine();
    _builder.append("* @param context ApplicationContext der Actitivity, von der aus diese");
    _builder.newLine();
    _builder.append("*            Methode aufgerufen wird");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abruf des Http-statusCode und einer");
    _builder.newLine();
    _builder.append("*            errorMessage");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void MIXsave");
    String _name_69 = attribute.getName();
    String _firstUpper_40 = StringExtensions.toFirstUpper(_name_69);
    _builder.append(_firstUpper_40, "");
    _builder.append("LinkToBackendAndUpdateLocalDatabase(");
    _builder.append(packagename, "");
    _builder.append(".");
    AndroidEntity _objectType_17 = attribute.getObjectType();
    String _name_70 = _objectType_17.getName();
    String _firstUpper_41 = StringExtensions.toFirstUpper(_name_70);
    _builder.append(_firstUpper_41, "");
    _builder.append(" objectEntity, ");
    {
      EList<LinkProperties> _linkproperties_6 = attribute.getLinkproperties();
      for(final LinkProperties linkprops_6 : _linkproperties_6) {
        String _type_3 = linkprops_6.getType();
        String _firstUpper_42 = StringExtensions.toFirstUpper(_type_3);
        String _plus_21 = (_firstUpper_42 + " ");
        String _name_71 = linkprops_6.getName();
        String _plus_22 = (_plus_21 + _name_71);
        String _plus_23 = (_plus_22 + ", ");
        _builder.append(_plus_23, "");
      }
    }
    _builder.append(" final Context context, final INoReturnValueCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final ");
    String _name_72 = androidEntity.getName();
    String _firstUpper_43 = StringExtensions.toFirstUpper(_name_72);
    _builder.append(_firstUpper_43, "\t");
    _builder.append(" ");
    String _name_73 = androidEntity.getName();
    _builder.append(_name_73, "\t");
    _builder.append(" = this;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("HashMap<String,Object> properties = new HashMap<String,Object>();");
    _builder.newLine();
    {
      EList<LinkProperties> _linkproperties_7 = attribute.getLinkproperties();
      for(final LinkProperties linkprops_7 : _linkproperties_7) {
        _builder.append("\t");
        _builder.append("if(");
        String _name_74 = linkprops_7.getName();
        _builder.append(_name_74, "\t");
        _builder.append(" != null){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        String _name_75 = linkprops_7.getName();
        String _plus_24 = ("properties.put(\"" + _name_75);
        String _plus_25 = (_plus_24 + "\", ");
        String _name_76 = linkprops_7.getName();
        String _plus_26 = (_plus_25 + _name_76);
        String _plus_27 = (_plus_26 + ");");
        _builder.append(_plus_27, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(properties.size()!=0){\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Link link = new Link();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("link.setType(\"");
    String _name_77 = attribute.getName();
    _builder.append(_name_77, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("link.setProperties(properties);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    String _name_78 = androidEntity.getName();
    String _firstUpper_44 = StringExtensions.toFirstUpper(_name_78);
    _builder.append(_firstUpper_44, "\t\t");
    _builder.append("PersistenceWrapper.saveLinkWithPropertiesByEntityIds(this, objectEntity, link, new IPostLinkCallback() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("public void onComplete(int statusCode, String selfURL, String errorMessage) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    String _name_79 = androidEntity.getName();
    String _firstUpper_45 = StringExtensions.toFirstUpper(_name_79);
    _builder.append(_firstUpper_45, "\t\t\t\t\t\t\t\t");
    _builder.append(".MIXload");
    String _name_80 = androidEntity.getName();
    String _firstUpper_46 = StringExtensions.toFirstUpper(_name_80);
    _builder.append(_firstUpper_46, "\t\t\t\t\t\t\t\t");
    _builder.append("FromBackendByIdAndUpdateToLocalDatabase(");
    String _name_81 = androidEntity.getName();
    _builder.append(_name_81, "\t\t\t\t\t\t\t\t");
    _builder.append(".getId(), context, new IReturnValueCallback<");
    String _name_82 = androidEntity.getName();
    String _firstUpper_47 = StringExtensions.toFirstUpper(_name_82);
    _builder.append(_firstUpper_47, "\t\t\t\t\t\t\t\t");
    _builder.append(">() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("public void onComplete(");
    String _name_83 = androidEntity.getName();
    String _firstUpper_48 = StringExtensions.toFirstUpper(_name_83);
    _builder.append(_firstUpper_48, "\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append(" entity, int statusCode, String errorMessage) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, Constants.UPDATE_SUCCESSFUL);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(-1,\terrorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, errorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* BACKEND UND LOKALE DATENBANK: Methode zum Anlegen MEHRER neuer Links vom");
    _builder.newLine();
    _builder.append("* Typ \"");
    String _name_84 = attribute.getName();
    _builder.append(_name_84, "");
    _builder.append("\" im Backend. Wenn die Speicherung im Backend erfolgreich war,");
    _builder.newLineIfNotEmpty();
    _builder.append("* erfolgt ein Update der lokalen Datenbank. ACHTUNG: Ein Update der lokalen");
    _builder.newLine();
    _builder.append("* Datenbank kann nur erfolgen, wenn die Entity, für die diese Methode");
    _builder.newLine();
    _builder.append("* aufgerufen wird, schon in der lokalen DB gespeichert wurde. Sonst erfolgt");
    _builder.newLine();
    _builder.append("* nur eine Speicherung im Backend. Auch wird der gesamte Speichervorgang abgebrochen,");
    _builder.newLine();
    _builder.append("* wenn alle Properties-Methodenparameter mit null gefüllt werden.");
    _builder.newLine();
    _builder.append("* BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/links/{type}/{objectId}");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param objectEntities HashSet mit allen ObjectEntities");
    _builder.newLine();
    _builder.append("* @param context ApplicationContext der Actitivity, von der aus diese");
    _builder.newLine();
    _builder.append("*            Methode aufgerufen wird");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abruf des Http-statusCode und einer");
    _builder.newLine();
    _builder.append("*            errorMessage");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void MIXsave");
    String _name_85 = attribute.getName();
    String _firstUpper_49 = StringExtensions.toFirstUpper(_name_85);
    _builder.append(_firstUpper_49, "");
    _builder.append("LinkToSeveral");
    AndroidEntity _objectType_18 = attribute.getObjectType();
    String _name_86 = _objectType_18.getName();
    String _firstUpper_50 = StringExtensions.toFirstUpper(_name_86);
    _builder.append(_firstUpper_50, "");
    _builder.append("ToBackendAndUpdateLocalDatabase(HashSet<");
    _builder.append(packagename, "");
    _builder.append(".");
    AndroidEntity _objectType_19 = attribute.getObjectType();
    String _name_87 = _objectType_19.getName();
    String _firstUpper_51 = StringExtensions.toFirstUpper(_name_87);
    _builder.append(_firstUpper_51, "");
    _builder.append("> objectEntities, ");
    {
      EList<LinkProperties> _linkproperties_8 = attribute.getLinkproperties();
      for(final LinkProperties linkprops_8 : _linkproperties_8) {
        String _type_4 = linkprops_8.getType();
        String _firstUpper_52 = StringExtensions.toFirstUpper(_type_4);
        String _plus_28 = (_firstUpper_52 + " ");
        String _name_88 = linkprops_8.getName();
        String _plus_29 = (_plus_28 + _name_88);
        String _plus_30 = (_plus_29 + ", ");
        _builder.append(_plus_30, "");
      }
    }
    _builder.append(" final Context context, final INoReturnValueCallback callback) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final ");
    String _name_89 = androidEntity.getName();
    String _firstUpper_53 = StringExtensions.toFirstUpper(_name_89);
    _builder.append(_firstUpper_53, "\t");
    _builder.append(" ");
    String _name_90 = attribute.getName();
    _builder.append(_name_90, "\t");
    _builder.append(" = this;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("HashMap<String,Object> properties = new HashMap<String,Object>();");
    _builder.newLine();
    {
      EList<LinkProperties> _linkproperties_9 = attribute.getLinkproperties();
      for(final LinkProperties linkprops_9 : _linkproperties_9) {
        _builder.append("\t");
        _builder.append("if(");
        String _name_91 = linkprops_9.getName();
        _builder.append(_name_91, "\t");
        _builder.append(" != null){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        String _name_92 = linkprops_9.getName();
        String _plus_31 = ("properties.put(\"" + _name_92);
        String _plus_32 = (_plus_31 + "\", ");
        String _name_93 = linkprops_9.getName();
        String _plus_33 = (_plus_32 + _name_93);
        String _plus_34 = (_plus_33 + ");");
        _builder.append(_plus_34, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(properties.size()!=0){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Link link = new Link();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("link.setType(\"");
    String _name_94 = attribute.getName();
    _builder.append(_name_94, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("link.setProperties(properties);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    String _name_95 = androidEntity.getName();
    String _firstUpper_54 = StringExtensions.toFirstUpper(_name_95);
    _builder.append(_firstUpper_54, "\t\t");
    _builder.append("PersistenceWrapper.saveLinkOfSameTypeWithPropertiesToSeveralObjectEntities(link, this, objectEntities, new IPostLinkCallback() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("public void onComplete(int statusCode, String selfURL, String errorMessage) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    String _name_96 = androidEntity.getName();
    String _firstUpper_55 = StringExtensions.toFirstUpper(_name_96);
    _builder.append(_firstUpper_55, "\t\t\t\t\t\t\t\t");
    _builder.append(".MIXload");
    String _name_97 = androidEntity.getName();
    String _firstUpper_56 = StringExtensions.toFirstUpper(_name_97);
    _builder.append(_firstUpper_56, "\t\t\t\t\t\t\t\t");
    _builder.append("FromBackendByIdAndUpdateToLocalDatabase(");
    String _name_98 = attribute.getName();
    _builder.append(_name_98, "\t\t\t\t\t\t\t\t");
    _builder.append(".getId(), context, new IReturnValueCallback<");
    String _name_99 = androidEntity.getName();
    String _firstUpper_57 = StringExtensions.toFirstUpper(_name_99);
    _builder.append(_firstUpper_57, "\t\t\t\t\t\t\t\t");
    _builder.append(">() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("public void onComplete(");
    String _name_100 = androidEntity.getName();
    String _firstUpper_58 = StringExtensions.toFirstUpper(_name_100);
    _builder.append(_firstUpper_58, "\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append(" entity, int statusCode, String errorMessage) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, Constants.UPDATE_SUCCESSFUL);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(-1,\terrorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, errorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* BACKEND UND LOKALE DATENBANK: Methode zum Updaten eines Links (dessen Properties) vom");
    _builder.newLine();
    _builder.append("* Typ \"");
    String _name_101 = attribute.getName();
    _builder.append(_name_101, "");
    _builder.append("\" im Backend. Wenn die Aktualisierung im Backend erfolgreich war,");
    _builder.newLineIfNotEmpty();
    _builder.append("* erfolgt ein Update der lokalen Datenbank. ACHTUNG: Ein Update der lokalen");
    _builder.newLine();
    _builder.append("* Datenbank kann nur erfolgen, wenn die Entity, für die diese Methode");
    _builder.newLine();
    _builder.append("* aufgerufen wird, schon in der lokalen DB gespeichert wurde. Sonst erfolgt");
    _builder.newLine();
    _builder.append("* nur ein Update im Backend. Auch wird der gesamte Updatevorgang abgebrochen,");
    _builder.newLine();
    _builder.append("* wenn alle Properties-Methodenparameter mit null gefüllt werden.");
    _builder.newLine();
    _builder.append("* BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/links/{type}/{objectId}");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param objectEntity objectEntity auf die Link zeigen soll");
    _builder.newLine();
    _builder.append("* @param context ApplicationContext der Actitivity, von der aus diese");
    _builder.newLine();
    _builder.append("*            Methode aufgerufen wird");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abruf des Http-statusCode und einer");
    _builder.newLine();
    _builder.append("*            errorMessage");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void MIXupdate");
    String _name_102 = attribute.getName();
    String _firstUpper_59 = StringExtensions.toFirstUpper(_name_102);
    _builder.append(_firstUpper_59, "");
    _builder.append("LinkPropertiesAtBackendAndLocalDatabase(");
    _builder.append(packagename, "");
    _builder.append(".");
    AndroidEntity _objectType_20 = attribute.getObjectType();
    String _name_103 = _objectType_20.getName();
    String _firstUpper_60 = StringExtensions.toFirstUpper(_name_103);
    _builder.append(_firstUpper_60, "");
    _builder.append(" objectEntity, ");
    {
      EList<LinkProperties> _linkproperties_10 = attribute.getLinkproperties();
      for(final LinkProperties linkprops_10 : _linkproperties_10) {
        String _type_5 = linkprops_10.getType();
        String _firstUpper_61 = StringExtensions.toFirstUpper(_type_5);
        String _plus_35 = (_firstUpper_61 + " ");
        String _name_104 = linkprops_10.getName();
        String _plus_36 = (_plus_35 + _name_104);
        String _plus_37 = (_plus_36 + ",");
        _builder.append(_plus_37, "");
      }
    }
    _builder.append(" final Context context, final INoReturnValueCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final ");
    String _name_105 = androidEntity.getName();
    String _firstUpper_62 = StringExtensions.toFirstUpper(_name_105);
    _builder.append(_firstUpper_62, "\t");
    _builder.append(" ");
    String _name_106 = androidEntity.getName();
    _builder.append(_name_106, "\t");
    _builder.append(" = this;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("HashMap<String,Object> properties = new HashMap<String,Object>();");
    _builder.newLine();
    {
      EList<LinkProperties> _linkproperties_11 = attribute.getLinkproperties();
      for(final LinkProperties linkprops_11 : _linkproperties_11) {
        _builder.append("\t");
        _builder.append("if(");
        String _name_107 = linkprops_11.getName();
        _builder.append(_name_107, "\t");
        _builder.append(" != null){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        String _name_108 = linkprops_11.getName();
        String _plus_38 = ("properties.put(\"" + _name_108);
        String _plus_39 = (_plus_38 + "\", ");
        String _name_109 = linkprops_11.getName();
        String _plus_40 = (_plus_39 + _name_109);
        String _plus_41 = (_plus_40 + ");");
        _builder.append(_plus_41, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(properties.size()!=0){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    String _name_110 = androidEntity.getName();
    String _firstUpper_63 = StringExtensions.toFirstUpper(_name_110);
    _builder.append(_firstUpper_63, "\t\t");
    _builder.append("PersistenceWrapper.updateSingleLinkProperties(this.getId(), objectEntity.getId(), \"");
    String _name_111 = attribute.getName();
    _builder.append(_name_111, "\t\t");
    _builder.append("\", properties, this, new INoReturnValueCallback() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("public void onComplete(int statusCode, String errorMessage) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    String _name_112 = androidEntity.getName();
    String _firstUpper_64 = StringExtensions.toFirstUpper(_name_112);
    _builder.append(_firstUpper_64, "\t\t\t\t\t\t\t\t");
    _builder.append(".MIXload");
    String _name_113 = androidEntity.getName();
    String _firstUpper_65 = StringExtensions.toFirstUpper(_name_113);
    _builder.append(_firstUpper_65, "\t\t\t\t\t\t\t\t");
    _builder.append("FromBackendByIdAndUpdateToLocalDatabase(");
    String _name_114 = androidEntity.getName();
    _builder.append(_name_114, "\t\t\t\t\t\t\t\t");
    _builder.append(".getId(), context, new IReturnValueCallback<");
    String _name_115 = androidEntity.getName();
    String _firstUpper_66 = StringExtensions.toFirstUpper(_name_115);
    _builder.append(_firstUpper_66, "\t\t\t\t\t\t\t\t");
    _builder.append(">() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("public void onComplete(");
    String _name_116 = androidEntity.getName();
    String _firstUpper_67 = StringExtensions.toFirstUpper(_name_116);
    _builder.append(_firstUpper_67, "\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append(" entity, int statusCode, String errorMessage) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, Constants.UPDATE_SUCCESSFUL);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(-1,\terrorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, errorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* BACKEND UND LOKALE DATENBANK: Methode zum Updaten ALLER Links (deren Properties) vom");
    _builder.newLine();
    _builder.append("* Typ \"");
    String _name_117 = attribute.getName();
    _builder.append(_name_117, "");
    _builder.append("\" im Backend. Wenn die Aktualisierung im Backend erfolgreich war,");
    _builder.newLineIfNotEmpty();
    _builder.append("* erfolgt ein Update der lokalen Datenbank. ACHTUNG: Ein Update der lokalen");
    _builder.newLine();
    _builder.append("* Datenbank kann nur erfolgen, wenn die Entity, für die diese Methode");
    _builder.newLine();
    _builder.append("* aufgerufen wird, schon in der lokalen DB gespeichert wurde. Sonst erfolgt");
    _builder.newLine();
    _builder.append("* nur ein Update im Backend. Auch wird der gesamte Updatevorgang abgebrochen,");
    _builder.newLine();
    _builder.append("* wenn alle Properties-Methodenparameter mit null gefüllt werden.");
    _builder.newLine();
    _builder.append("* BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/links/{type}");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param context ApplicationContext der Actitivity, von der aus diese");
    _builder.newLine();
    _builder.append("*            Methode aufgerufen wird");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abruf des Http-statusCode und einer");
    _builder.newLine();
    _builder.append("*            errorMessage, DARF NICHT NULL SEIN");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void MIXupdateAll");
    String _name_118 = attribute.getName();
    String _firstUpper_68 = StringExtensions.toFirstUpper(_name_118);
    _builder.append(_firstUpper_68, "");
    _builder.append("LinkPropertiesAtBackendAndAtLocalDatabase(");
    {
      EList<LinkProperties> _linkproperties_12 = attribute.getLinkproperties();
      for(final LinkProperties linkprops_12 : _linkproperties_12) {
        String _type_6 = linkprops_12.getType();
        String _firstUpper_69 = StringExtensions.toFirstUpper(_type_6);
        String _plus_42 = (_firstUpper_69 + " ");
        String _name_119 = linkprops_12.getName();
        String _plus_43 = (_plus_42 + _name_119);
        String _plus_44 = (_plus_43 + ",");
        _builder.append(_plus_44, "");
      }
    }
    _builder.append(" final Context context, final INoReturnValueCallback callback)  {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final ");
    String _name_120 = androidEntity.getName();
    String _firstUpper_70 = StringExtensions.toFirstUpper(_name_120);
    _builder.append(_firstUpper_70, "\t");
    _builder.append(" ");
    String _name_121 = androidEntity.getName();
    _builder.append(_name_121, "\t");
    _builder.append(" = this;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("HashMap<String,Object> properties = new HashMap<String,Object>();");
    _builder.newLine();
    {
      EList<LinkProperties> _linkproperties_13 = attribute.getLinkproperties();
      for(final LinkProperties linkprops_13 : _linkproperties_13) {
        _builder.append("\t");
        _builder.append("if(");
        String _name_122 = linkprops_13.getName();
        _builder.append(_name_122, "\t");
        _builder.append(" != null){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        String _name_123 = linkprops_13.getName();
        String _plus_45 = ("properties.put(\"" + _name_123);
        String _plus_46 = (_plus_45 + "\", ");
        String _name_124 = linkprops_13.getName();
        String _plus_47 = (_plus_46 + _name_124);
        String _plus_48 = (_plus_47 + ");");
        _builder.append(_plus_48, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(properties.size()!=0){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    String _name_125 = androidEntity.getName();
    String _firstUpper_71 = StringExtensions.toFirstUpper(_name_125);
    _builder.append(_firstUpper_71, "\t\t");
    _builder.append("PersistenceWrapper.updateAllLinkPropertiesOfSameLinkType(this.getId(), \"");
    String _name_126 = attribute.getName();
    _builder.append(_name_126, "\t\t");
    _builder.append("\", this, properties, new INoReturnValueCallback() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("public void onComplete(int statusCode, String errorMessage) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    String _name_127 = androidEntity.getName();
    String _firstUpper_72 = StringExtensions.toFirstUpper(_name_127);
    _builder.append(_firstUpper_72, "\t\t\t\t\t\t\t\t");
    _builder.append(".MIXload");
    String _name_128 = androidEntity.getName();
    String _firstUpper_73 = StringExtensions.toFirstUpper(_name_128);
    _builder.append(_firstUpper_73, "\t\t\t\t\t\t\t\t");
    _builder.append("FromBackendByIdAndUpdateToLocalDatabase(");
    String _name_129 = androidEntity.getName();
    _builder.append(_name_129, "\t\t\t\t\t\t\t\t");
    _builder.append(".getId(), context, new IReturnValueCallback<");
    String _name_130 = androidEntity.getName();
    String _firstUpper_74 = StringExtensions.toFirstUpper(_name_130);
    _builder.append(_firstUpper_74, "\t\t\t\t\t\t\t\t");
    _builder.append(">() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("public void onComplete(");
    String _name_131 = androidEntity.getName();
    String _firstUpper_75 = StringExtensions.toFirstUpper(_name_131);
    _builder.append(_firstUpper_75, "\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append(" entity, int statusCode, String errorMessage) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, Constants.UPDATE_SUCCESSFUL);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(-1,\terrorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, errorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* BACKEND UND LOKALE DATENBANK: Methode zum Löschen eines Links vom");
    _builder.newLine();
    _builder.append("* Typ \"");
    String _name_132 = attribute.getName();
    _builder.append(_name_132, "");
    _builder.append("\" im Backend. Wenn die Löschung im Backend erfolgreich war,");
    _builder.newLineIfNotEmpty();
    _builder.append("* erfolgt ein Update der lokalen Datenbank. ACHTUNG: Ein Update der lokalen");
    _builder.newLine();
    _builder.append("* Datenbank kann nur erfolgen, wenn die Entity, für die diese Methode");
    _builder.newLine();
    _builder.append("* aufgerufen wird, schon in der lokalen DB gespeichert wurde. Sonst erfolgt");
    _builder.newLine();
    _builder.append("* nur eine Löschung im Backend. ");
    _builder.newLine();
    _builder.append("* BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/links/{type}/{objectId}");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param objectEntity ObjectEntity, auf die Link verweist");
    _builder.newLine();
    _builder.append("* @param context ApplicationContext der Actitivity, von der aus diese");
    _builder.newLine();
    _builder.append("*            Methode aufgerufen wird");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abruf des Http-statusCode und einer");
    _builder.newLine();
    _builder.append("*            errorMessage");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void MIXdeleteSingle");
    String _name_133 = attribute.getName();
    String _firstUpper_76 = StringExtensions.toFirstUpper(_name_133);
    _builder.append(_firstUpper_76, "");
    _builder.append("LinkFromBackendAndUpdateLocalDatabase(");
    _builder.append(packagename, "");
    _builder.append(".");
    AndroidEntity _objectType_21 = attribute.getObjectType();
    String _name_134 = _objectType_21.getName();
    String _firstUpper_77 = StringExtensions.toFirstUpper(_name_134);
    _builder.append(_firstUpper_77, "");
    _builder.append(" objectEntity, final Context context, final INoReturnValueCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final ");
    String _name_135 = androidEntity.getName();
    String _firstUpper_78 = StringExtensions.toFirstUpper(_name_135);
    _builder.append(_firstUpper_78, "\t");
    _builder.append(" ");
    String _name_136 = androidEntity.getName();
    _builder.append(_name_136, "\t");
    _builder.append(" = this;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_137 = androidEntity.getName();
    String _firstUpper_79 = StringExtensions.toFirstUpper(_name_137);
    _builder.append(_firstUpper_79, "\t");
    _builder.append("PersistenceWrapper.deleteSingleLink(this.getId(), objectEntity.getId(), \"");
    String _name_138 = attribute.getName();
    _builder.append(_name_138, "\t");
    _builder.append("\", this, new INoReturnValueCallback() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("public void onComplete(int statusCode, String errorMessage) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    String _name_139 = androidEntity.getName();
    String _firstUpper_80 = StringExtensions.toFirstUpper(_name_139);
    _builder.append(_firstUpper_80, "\t\t\t\t\t\t\t");
    _builder.append(".MIXload");
    String _name_140 = androidEntity.getName();
    String _firstUpper_81 = StringExtensions.toFirstUpper(_name_140);
    _builder.append(_firstUpper_81, "\t\t\t\t\t\t\t");
    _builder.append("FromBackendByIdAndUpdateToLocalDatabase(");
    String _name_141 = androidEntity.getName();
    _builder.append(_name_141, "\t\t\t\t\t\t\t");
    _builder.append(".getId(), context, new IReturnValueCallback<");
    String _name_142 = androidEntity.getName();
    String _firstUpper_82 = StringExtensions.toFirstUpper(_name_142);
    _builder.append(_firstUpper_82, "\t\t\t\t\t\t\t");
    _builder.append(">() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("public void onComplete(");
    String _name_143 = androidEntity.getName();
    String _firstUpper_83 = StringExtensions.toFirstUpper(_name_143);
    _builder.append(_firstUpper_83, "\t\t\t\t\t\t\t\t\t\t");
    _builder.append(" entity, int statusCode, String errorMessage) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, Constants.UPDATE_SUCCESSFUL);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(-1,\terrorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, errorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* BACKEND UND LOKALE DATENBANK: Methode zum Löschen ALLER Links vom");
    _builder.newLine();
    _builder.append("* Typ \"");
    String _name_144 = attribute.getName();
    _builder.append(_name_144, "");
    _builder.append("\" im Backend. Wenn die Aktualisierung im Backend erfolgreich war,");
    _builder.newLineIfNotEmpty();
    _builder.append("* erfolgt ein Update der lokalen Datenbank. ACHTUNG: Ein Update der lokalen");
    _builder.newLine();
    _builder.append("* Datenbank kann nur erfolgen, wenn die Entity, für die diese Methode");
    _builder.newLine();
    _builder.append("* aufgerufen wird, schon in der lokalen DB gespeichert wurde. Sonst erfolgt");
    _builder.newLine();
    _builder.append("* nur eine Löschung im Backend. ");
    _builder.newLine();
    _builder.append("* BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/links/{type}");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param context ApplicationContext der Actitivity, von der aus diese");
    _builder.newLine();
    _builder.append("*            Methode aufgerufen wird");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abruf des Http-statusCode und einer");
    _builder.newLine();
    _builder.append("*            errorMessage");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void MIXdeleteAll");
    String _name_145 = attribute.getName();
    String _firstUpper_84 = StringExtensions.toFirstUpper(_name_145);
    _builder.append(_firstUpper_84, "");
    _builder.append("LinksFromBackendAndUpdateLocalDatabase(final Context context, final INoReturnValueCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final ");
    String _name_146 = androidEntity.getName();
    String _firstUpper_85 = StringExtensions.toFirstUpper(_name_146);
    _builder.append(_firstUpper_85, "\t");
    _builder.append(" ");
    String _name_147 = androidEntity.getName();
    _builder.append(_name_147, "\t");
    _builder.append(" = this;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_148 = androidEntity.getName();
    String _firstUpper_86 = StringExtensions.toFirstUpper(_name_148);
    _builder.append(_firstUpper_86, "\t");
    _builder.append("PersistenceWrapper.deleteAllLinkPropertiesOfSameLinkType(this.getId(), \"");
    String _name_149 = attribute.getName();
    _builder.append(_name_149, "\t");
    _builder.append("\", this, new INoReturnValueCallback() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("public void onComplete(int statusCode, String errorMessage) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    String _name_150 = androidEntity.getName();
    String _firstUpper_87 = StringExtensions.toFirstUpper(_name_150);
    _builder.append(_firstUpper_87, "\t\t\t\t\t\t\t");
    _builder.append(".MIXload");
    String _name_151 = androidEntity.getName();
    String _firstUpper_88 = StringExtensions.toFirstUpper(_name_151);
    _builder.append(_firstUpper_88, "\t\t\t\t\t\t\t");
    _builder.append("FromBackendByIdAndUpdateToLocalDatabase(");
    String _name_152 = androidEntity.getName();
    _builder.append(_name_152, "\t\t\t\t\t\t\t");
    _builder.append(".getId(), context, new IReturnValueCallback<");
    String _name_153 = androidEntity.getName();
    String _firstUpper_89 = StringExtensions.toFirstUpper(_name_153);
    _builder.append(_firstUpper_89, "\t\t\t\t\t\t\t");
    _builder.append(">() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("public void onComplete(");
    String _name_154 = androidEntity.getName();
    String _firstUpper_90 = StringExtensions.toFirstUpper(_name_154);
    _builder.append(_firstUpper_90, "\t\t\t\t\t\t\t\t\t\t");
    _builder.append(" entity, int statusCode, String errorMessage) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, Constants.UPDATE_SUCCESSFUL);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(-1,\terrorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, errorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.newLine();
    {
      EList<LinkProperties> _linkproperties_14 = attribute.getLinkproperties();
      for(final LinkProperties linkprops_14 : _linkproperties_14) {
        CharSequence _compilelinkproperties = CreateEntityLinkProperties.compilelinkproperties(attribute, androidEntity, packagename, linkprops_14);
        _builder.append(_compilelinkproperties, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public static CharSequence compilelinkproperties(final AndroidAttribute attribute, final AndroidEntity androidEntity, final String packagename, final LinkProperties linkProperties) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//ab hier LinkProperty ");
    String _name = linkProperties.getName();
    _builder.append(_name, "");
    _builder.newLineIfNotEmpty();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* NUR BACKEND: Methode zum Updaten des LinkProperty \"");
    String _name_1 = linkProperties.getName();
    _builder.append(_name_1, "");
    _builder.append("\" vom Typ \"");
    String _name_2 = attribute.getName();
    _builder.append(_name_2, "");
    _builder.append("\" im");
    _builder.newLineIfNotEmpty();
    _builder.append("* Orca-Backend.  ACHTUNG: Wenn als Property-Parameter null übergeben wird, erfolgt kein Update.");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/links/{type}/{objectId}/property");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param objectEntity ObjectEntity, auf die der Link zeigt");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abfragen des Http-StatusCode und der");
    _builder.newLine();
    _builder.append("*            ErrorMessage");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public void BACKENDupdate");
    String _name_3 = attribute.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_3);
    _builder.append(_firstUpper, "");
    _builder.append("LinkProperty");
    String _name_4 = linkProperties.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_4);
    _builder.append(_firstUpper_1, "");
    _builder.append("AtBackendAndThisObject(");
    _builder.append(packagename, "");
    _builder.append(".");
    AndroidEntity _objectType = attribute.getObjectType();
    String _name_5 = _objectType.getName();
    String _firstUpper_2 = StringExtensions.toFirstUpper(_name_5);
    _builder.append(_firstUpper_2, "");
    _builder.append(" objectEntity, ");
    String _type = linkProperties.getType();
    String _firstUpper_3 = StringExtensions.toFirstUpper(_type);
    _builder.append(_firstUpper_3, "");
    _builder.append(" new");
    String _name_6 = linkProperties.getName();
    String _firstUpper_4 = StringExtensions.toFirstUpper(_name_6);
    _builder.append(_firstUpper_4, "");
    _builder.append("Value, INoReturnValueCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("HashMap<String,Object> property = new HashMap<String,Object>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(new");
    String _name_7 = linkProperties.getName();
    String _firstUpper_5 = StringExtensions.toFirstUpper(_name_7);
    _builder.append(_firstUpper_5, "\t");
    _builder.append("Value != null){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("property.put(\"");
    String _name_8 = linkProperties.getName();
    _builder.append(_name_8, "\t\t");
    _builder.append("\", new");
    String _name_9 = linkProperties.getName();
    String _firstUpper_6 = StringExtensions.toFirstUpper(_name_9);
    _builder.append(_firstUpper_6, "\t\t");
    _builder.append("Value);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(property.size()!=0){");
    _builder.newLine();
    _builder.append("\t\t");
    String _name_10 = androidEntity.getName();
    String _firstUpper_7 = StringExtensions.toFirstUpper(_name_10);
    _builder.append(_firstUpper_7, "\t\t");
    _builder.append("PersistenceWrapper.updateLinkPropertyAddAditionalProperties(this.getId(), objectEntity.getId(), \"");
    String _name_11 = attribute.getName();
    _builder.append(_name_11, "\t\t");
    _builder.append("\", this, property, callback);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("/** ");
    _builder.newLine();
    _builder.append("* NUR BACKEND: Methode zum löschen des LinkProperty \"");
    String _name_12 = linkProperties.getName();
    _builder.append(_name_12, "");
    _builder.append("\" vom Typ \"");
    String _name_13 = attribute.getName();
    _builder.append(_name_13, "");
    _builder.append("\" im");
    _builder.newLineIfNotEmpty();
    _builder.append("* Orca-Backend. ");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/links/{type}/{objectId}/{property}");
    _builder.newLine();
    _builder.append("* @param objectEntity ObjectEntity, auf die der Link zeigt");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abfragen des Http-StatusCode und der");
    _builder.newLine();
    _builder.append("*            ErrorMessage");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore ");
    _builder.newLine();
    _builder.append("public void BACKENDdelete");
    String _name_14 = attribute.getName();
    String _firstUpper_8 = StringExtensions.toFirstUpper(_name_14);
    _builder.append(_firstUpper_8, "");
    _builder.append("LinkProperty");
    String _name_15 = linkProperties.getName();
    String _firstUpper_9 = StringExtensions.toFirstUpper(_name_15);
    _builder.append(_firstUpper_9, "");
    _builder.append("AtBackendAndThisObject(");
    _builder.append(packagename, "");
    _builder.append(".");
    AndroidEntity _objectType_1 = attribute.getObjectType();
    String _name_16 = _objectType_1.getName();
    String _firstUpper_10 = StringExtensions.toFirstUpper(_name_16);
    _builder.append(_firstUpper_10, "");
    _builder.append(" objectEntity, INoReturnValueCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_17 = androidEntity.getName();
    String _firstUpper_11 = StringExtensions.toFirstUpper(_name_17);
    _builder.append(_firstUpper_11, "\t");
    _builder.append("PersistenceWrapper.deleteSingleLinkPropertyOfSameLinkType(this.getId(), objectEntity.getId(), \"");
    String _name_18 = attribute.getName();
    _builder.append(_name_18, "\t");
    _builder.append("\", this, \"");
    String _name_19 = linkProperties.getName();
    _builder.append(_name_19, "\t");
    _builder.append("\", callback);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("// bis hier");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// zusätzliche Methode");
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* BACKEND UND LOKALE DATENBANK: Methode zum updaten des LinkProperty \"");
    String _name_20 = linkProperties.getName();
    _builder.append(_name_20, "\t ");
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("* des LinkTyps \"");
    String _name_21 = attribute.getName();
    _builder.append(_name_21, "\t ");
    _builder.append("\" im Backend. Wenn das Update im Backend erfolgreich war,");
    _builder.newLineIfNotEmpty();
    _builder.append("\t ");
    _builder.append("* erfolgt ein Update der lokalen Datenbank. ACHTUNG: Das Update der lokalen");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Datenbank kann nur erfolgen, wenn die Entity, für die diese Methode");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* aufgerufen wird, schon in der lokalen DB gespeichert wurde. Das Update");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* wird nicht durchgeführt, wenn alle PropertyParameter dieser Methode mit");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* null belegt werden. BACKEND-ENDPUNKT:");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* /api/{appname}/entities/{id}/links/{type}/{objectId}/property");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param objectEntity ObjectEntity, auf die der Link zeigt");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param context ApplicationContext der Activity, von der aus diese Methode");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            aufgerufen wird");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param callback Callback zum Abfragen des Http-StatusCode und der");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            ErrorMessage");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void MIXupdate");
    String _name_22 = attribute.getName();
    String _firstUpper_12 = StringExtensions.toFirstUpper(_name_22);
    _builder.append(_firstUpper_12, "");
    _builder.append("LinkProperty");
    String _name_23 = linkProperties.getName();
    String _firstUpper_13 = StringExtensions.toFirstUpper(_name_23);
    _builder.append(_firstUpper_13, "");
    _builder.append("AtBackendAndUpdateLocalDatabase(");
    _builder.append(packagename, "");
    _builder.append(".");
    AndroidEntity _objectType_2 = attribute.getObjectType();
    String _name_24 = _objectType_2.getName();
    String _firstUpper_14 = StringExtensions.toFirstUpper(_name_24);
    _builder.append(_firstUpper_14, "");
    _builder.append(" objectEntity, ");
    String _type_1 = linkProperties.getType();
    String _firstUpper_15 = StringExtensions.toFirstUpper(_type_1);
    _builder.append(_firstUpper_15, "");
    _builder.append(" new");
    String _name_25 = linkProperties.getName();
    String _firstUpper_16 = StringExtensions.toFirstUpper(_name_25);
    _builder.append(_firstUpper_16, "");
    _builder.append("Value, final Context context, final INoReturnValueCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final ");
    String _name_26 = androidEntity.getName();
    String _firstUpper_17 = StringExtensions.toFirstUpper(_name_26);
    _builder.append(_firstUpper_17, "\t");
    _builder.append(" ");
    String _name_27 = androidEntity.getName();
    _builder.append(_name_27, "\t");
    _builder.append(" = this;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("HashMap<String,Object> property = new HashMap<String,Object>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(new");
    String _name_28 = linkProperties.getName();
    String _firstUpper_18 = StringExtensions.toFirstUpper(_name_28);
    _builder.append(_firstUpper_18, "\t");
    _builder.append("Value != null){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("property.put(\"");
    String _name_29 = linkProperties.getName();
    _builder.append(_name_29, "\t\t");
    _builder.append("\", new");
    String _name_30 = linkProperties.getName();
    String _firstUpper_19 = StringExtensions.toFirstUpper(_name_30);
    _builder.append(_firstUpper_19, "\t\t");
    _builder.append("Value);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if(property.size()!=0){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    String _name_31 = androidEntity.getName();
    String _firstUpper_20 = StringExtensions.toFirstUpper(_name_31);
    _builder.append(_firstUpper_20, "\t\t");
    _builder.append("PersistenceWrapper.updateLinkPropertyAddAditionalProperties(this.getId(), objectEntity.getId(), \"");
    String _name_32 = attribute.getName();
    _builder.append(_name_32, "\t\t");
    _builder.append("\", this, property, new INoReturnValueCallback() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("public void onComplete(int statusCode, String errorMessage) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    String _name_33 = androidEntity.getName();
    String _firstUpper_21 = StringExtensions.toFirstUpper(_name_33);
    _builder.append(_firstUpper_21, "\t\t\t\t\t\t\t\t");
    _builder.append(".MIXload");
    String _name_34 = androidEntity.getName();
    String _firstUpper_22 = StringExtensions.toFirstUpper(_name_34);
    _builder.append(_firstUpper_22, "\t\t\t\t\t\t\t\t");
    _builder.append("FromBackendByIdAndUpdateToLocalDatabase(");
    String _name_35 = androidEntity.getName();
    _builder.append(_name_35, "\t\t\t\t\t\t\t\t");
    _builder.append(".getId(), context, new IReturnValueCallback<");
    String _name_36 = androidEntity.getName();
    String _firstUpper_23 = StringExtensions.toFirstUpper(_name_36);
    _builder.append(_firstUpper_23, "\t\t\t\t\t\t\t\t");
    _builder.append(">() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("public void onComplete(");
    String _name_37 = androidEntity.getName();
    String _firstUpper_24 = StringExtensions.toFirstUpper(_name_37);
    _builder.append(_firstUpper_24, "\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append(" entity, int statusCode, String errorMessage) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, Constants.UPDATE_SUCCESSFUL);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(-1,\terrorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, errorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    return _builder;
  }
}
