package org.xtext.orcasdk.entitymodel.generator.image;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.orcasdk.entitymodel.entityModel.AndroidAttribute;
import org.xtext.orcasdk.entitymodel.entityModel.AndroidEntity;

@SuppressWarnings("all")
public class CreateImageMethods {
  public static CharSequence compileimages(final AndroidAttribute attribute, final AndroidEntity androidEntity, final String packagename) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//ab hier Methoden für images ");
    String _name = attribute.getName();
    _builder.append(_name, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* NUR BACKEND: Methode zum Speichern oder Updaten eines Images vom Namen \"");
    String _name_1 = attribute.getName();
    _builder.append(_name_1, "");
    _builder.append("\" im Orca-Backend. BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/image/{property}");
    _builder.newLineIfNotEmpty();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param context ApplicationContext der Actitivity, von der aus diese");
    _builder.newLine();
    _builder.append("*            Methode aufgerufen wird");
    _builder.newLine();
    _builder.append("* @param ressourceOfImage die AndroidInt-Ressource, z.B. R.drawable.ic_launcher");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abfragen von Fehlern und des Http-Response-StatusCode");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void BACKENDsaveOrUpdateImage");
    String _name_2 = attribute.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_2);
    _builder.append(_firstUpper, "");
    _builder.append("ByIntRessourceAtBackend(Context context, int ressourceOfImage, INoReturnValueCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_3 = androidEntity.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_3);
    _builder.append(_firstUpper_1, "\t");
    _builder.append("PersistenceWrapper.saveOrUpdate");
    String _name_4 = androidEntity.getName();
    String _firstUpper_2 = StringExtensions.toFirstUpper(_name_4);
    _builder.append(_firstUpper_2, "\t");
    _builder.append("ImageByIntRessource(this.getId(), \"");
    String _name_5 = attribute.getName();
    _builder.append(_name_5, "\t");
    _builder.append("\", context, ressourceOfImage, callback);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* NUR BACKEND: Methode zum Speichern oder Updaten eines Images vom Namen \"");
    String _name_6 = attribute.getName();
    _builder.append(_name_6, "");
    _builder.append("\" im Orca-Backend. BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/image/{property}");
    _builder.newLineIfNotEmpty();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param context ApplicationContext der Actitivity, von der aus diese");
    _builder.newLine();
    _builder.append("*            Methode aufgerufen wird");
    _builder.newLine();
    _builder.append("* @param inputStream das Bild als InputStream");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abfragen von Fehlern und des Http-Response-StatusCode");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void BACKENDsaveOrUpdateImage");
    String _name_7 = attribute.getName();
    String _firstUpper_3 = StringExtensions.toFirstUpper(_name_7);
    _builder.append(_firstUpper_3, "");
    _builder.append("ByInputStreamAtBackend(Context context, InputStream inputStream, INoReturnValueCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_8 = androidEntity.getName();
    String _firstUpper_4 = StringExtensions.toFirstUpper(_name_8);
    _builder.append(_firstUpper_4, "\t");
    _builder.append("PersistenceWrapper.saveOrUpdate");
    String _name_9 = androidEntity.getName();
    String _firstUpper_5 = StringExtensions.toFirstUpper(_name_9);
    _builder.append(_firstUpper_5, "\t");
    _builder.append("ImageByInputStream(this.getId(), \"");
    String _name_10 = attribute.getName();
    _builder.append(_name_10, "\t");
    _builder.append("\", context, inputStream, callback);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* NUR BACKEND: Methode zum Löschen des Image mit Namen ");
    String _name_11 = attribute.getName();
    _builder.append(_name_11, "");
    _builder.append(" im Orca-Backend.");
    _builder.newLineIfNotEmpty();
    _builder.append("* BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/image/{property}");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abfragen des Http-Response-StatusCode und einer ErrorMessage, falls Fehler auftreten.");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void BACKENDdeleteImage");
    String _name_12 = attribute.getName();
    String _firstUpper_6 = StringExtensions.toFirstUpper(_name_12);
    _builder.append(_firstUpper_6, "");
    _builder.append("FromBackend(INoReturnValueCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_13 = androidEntity.getName();
    String _firstUpper_7 = StringExtensions.toFirstUpper(_name_13);
    _builder.append(_firstUpper_7, "\t");
    _builder.append("PersistenceWrapper.delete");
    String _name_14 = androidEntity.getName();
    String _firstUpper_8 = StringExtensions.toFirstUpper(_name_14);
    _builder.append(_firstUpper_8, "\t");
    _builder.append("Image(this, \"");
    String _name_15 = attribute.getName();
    _builder.append(_name_15, "\t");
    _builder.append("\", callback);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* NUR BACKEND: Methode zum Laden des Image mit Namen \"");
    String _name_16 = attribute.getName();
    _builder.append(_name_16, "");
    _builder.append("\" aus dem Orca-Backend.");
    _builder.newLineIfNotEmpty();
    _builder.append("* BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/image/{property}");
    _builder.newLine();
    _builder.append("* ");
    _builder.newLine();
    _builder.append("* @param width die Breite, die das abgefragte Bild haben soll (in Pixeln)");
    _builder.newLine();
    _builder.append("* @param height die Höhe, die das abgefragte Bild haben soll (in Pixeln)");
    _builder.newLine();
    _builder.append("* @param radius hierüber wird angegeben, ob und wie stark die Ecken abgerundet werden");
    _builder.newLine();
    _builder.append("* @param backgroundColor Hintergrundfarbe als Hex-Wert, dieser ist als String zu übergeben! ");
    _builder.newLine();
    _builder.append("* Der String muss genau 8 Zeichen lang sein, und einen korrekten Farbwert darstellen, ansonsten");
    _builder.newLine();
    _builder.append("* treten Fehler auf. (DefaultWert ist Farbe weiß \"00000000\").");
    _builder.newLine();
    _builder.append("* @param callback Callback zum Abfragen des HTTP-Response-StatusCode und einer ErrorMessage");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void BACKENDloadImage");
    String _name_17 = attribute.getName();
    String _firstUpper_9 = StringExtensions.toFirstUpper(_name_17);
    _builder.append(_firstUpper_9, "");
    _builder.append("FromBackend(int width, int height, int radius, String backgroundColor, IImageCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_18 = androidEntity.getName();
    String _firstUpper_10 = StringExtensions.toFirstUpper(_name_18);
    _builder.append(_firstUpper_10, "\t");
    _builder.append("PersistenceWrapper.load");
    String _name_19 = androidEntity.getName();
    String _firstUpper_11 = StringExtensions.toFirstUpper(_name_19);
    _builder.append(_firstUpper_11, "\t");
    _builder.append("Image(this.getId(), \"");
    String _name_20 = attribute.getName();
    _builder.append(_name_20, "\t");
    _builder.append("\", width, height, radius, backgroundColor, callback);");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("// bis hier image ");
    String _name_21 = attribute.getName();
    _builder.append(_name_21, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("// hier kommen die zusätzlichen imageMethoden");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* BACKEND UND LOKALE DATENBANK: Methode zum Speichern/Updaten eines Image mit Namen \"");
    String _name_22 = attribute.getName();
    _builder.append(_name_22, " ");
    _builder.append("\" im Backend ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* und der lokalen DB. Wenn Speichern/Update im Backend erfolgreich war, dann wird die entsprechend neue Entity vom ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Backend geladen und mit dem neuen ImageProperty in der lokalen Datenbank gespeichert/upgedatet.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ACHTUNG: Es sollte sichergestellt sein, dass die Entity schon in der lokalen Datenbank vorhanden");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ist. Ansonsten kommt es zu Fehlern und das Image wird nur im Backend gespeichert. ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/image/{property}");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param ressourceOfImage die AndroidInt-Ressource, z.B. R.drawable.ic_launcher");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param context ApplicationContext der Actitivity, von der aus diese");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*            Methode aufgerufen wird; wird für das Öffnen, Lesen und Verändern der DB benötigt");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param callback Callback zum Abfragen von Fehlern und des Http-Response-StatusCode, DARF NICHT NULL SEIN");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void MIXsaveOrUpdateImage");
    String _name_23 = attribute.getName();
    String _firstUpper_12 = StringExtensions.toFirstUpper(_name_23);
    _builder.append(_firstUpper_12, "");
    _builder.append("ByIntRessourceAtBackendAndUpdateLocalDatabase(int ressourceOfImage, final Context context, final INoReturnValueCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final ");
    String _name_24 = androidEntity.getName();
    String _firstUpper_13 = StringExtensions.toFirstUpper(_name_24);
    _builder.append(_firstUpper_13, "\t");
    _builder.append(" ");
    String _name_25 = androidEntity.getName();
    _builder.append(_name_25, "\t");
    _builder.append(" = this;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_26 = androidEntity.getName();
    String _firstUpper_14 = StringExtensions.toFirstUpper(_name_26);
    _builder.append(_firstUpper_14, "\t");
    _builder.append("PersistenceWrapper.saveOrUpdate");
    String _name_27 = androidEntity.getName();
    String _firstUpper_15 = StringExtensions.toFirstUpper(_name_27);
    _builder.append(_firstUpper_15, "\t");
    _builder.append("ImageByIntRessource(this.getId(), \"");
    String _name_28 = attribute.getName();
    _builder.append(_name_28, "\t");
    _builder.append("\", context, ressourceOfImage, new INoReturnValueCallback() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("public void onComplete(int statusCode, String errorMessage) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    String _name_29 = androidEntity.getName();
    String _firstUpper_16 = StringExtensions.toFirstUpper(_name_29);
    _builder.append(_firstUpper_16, "\t\t\t\t\t\t\t");
    _builder.append(".MIXload");
    String _name_30 = androidEntity.getName();
    String _firstUpper_17 = StringExtensions.toFirstUpper(_name_30);
    _builder.append(_firstUpper_17, "\t\t\t\t\t\t\t");
    _builder.append("FromBackendByIdAndUpdateToLocalDatabase(");
    String _name_31 = androidEntity.getName();
    _builder.append(_name_31, "\t\t\t\t\t\t\t");
    _builder.append(".getId(), context, new IReturnValueCallback<");
    String _name_32 = androidEntity.getName();
    String _firstUpper_18 = StringExtensions.toFirstUpper(_name_32);
    _builder.append(_firstUpper_18, "\t\t\t\t\t\t\t");
    _builder.append(">() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("public void onComplete(");
    String _name_33 = androidEntity.getName();
    String _firstUpper_19 = StringExtensions.toFirstUpper(_name_33);
    _builder.append(_firstUpper_19, "\t\t\t\t\t\t\t\t\t\t");
    _builder.append(" entity, int statusCode, String errorMessage) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, Constants.UPDATE_SUCCESSFUL);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(-1,\terrorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, errorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* BACKEND UND LOKALE DATENBANK: Methode zum Speichern/Updaten eines Image mit Namen \"");
    String _name_34 = attribute.getName();
    _builder.append(_name_34, " ");
    _builder.append("\" im Backend ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* und der lokalen DB. Wenn Speichern/Update im Backend erfolgreich war, dann wird die entsprechend neue Entity vom ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Backend geladen und mit dem neuen ImageProperty in der lokalen Datenbank gespeichert/upgedatet.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ACHTUNG: Es sollte sichergestellt sein, dass die Entity schon in der lokalen Datenbank vorhanden");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ist. Ansonsten kommt es zu Fehlern und das Image wird nur im Backend gespeichert. ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/image/{property}");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param inputStream das Bild als InputStream");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param context ApplicationContext der Actitivity, von der aus diese");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*            Methode aufgerufen wird; wird für das Öffnen, Lesen und Verändern der DB benötigt");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param callback Callback zum Abfragen von Fehlern und des Http-Response-StatusCode, DARF NICHT NULL SEIN");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void MIXsaveOrUpdateImage");
    String _name_35 = attribute.getName();
    String _firstUpper_20 = StringExtensions.toFirstUpper(_name_35);
    _builder.append(_firstUpper_20, "");
    _builder.append("ByInputStreamAtBackendAndUpdateLocalDatabase(InputStream inputStream, final Context context, final INoReturnValueCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final ");
    String _name_36 = androidEntity.getName();
    String _firstUpper_21 = StringExtensions.toFirstUpper(_name_36);
    _builder.append(_firstUpper_21, "\t");
    _builder.append(" ");
    String _name_37 = androidEntity.getName();
    _builder.append(_name_37, "\t");
    _builder.append(" = this;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_38 = androidEntity.getName();
    String _firstUpper_22 = StringExtensions.toFirstUpper(_name_38);
    _builder.append(_firstUpper_22, "\t");
    _builder.append("PersistenceWrapper.saveOrUpdate");
    String _name_39 = androidEntity.getName();
    String _firstUpper_23 = StringExtensions.toFirstUpper(_name_39);
    _builder.append(_firstUpper_23, "\t");
    _builder.append("ImageByInputStream(this.getId(), \"");
    String _name_40 = attribute.getName();
    _builder.append(_name_40, "\t");
    _builder.append("\", context, inputStream, new INoReturnValueCallback() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("public void onComplete(int statusCode, String errorMessage) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    String _name_41 = androidEntity.getName();
    String _firstUpper_24 = StringExtensions.toFirstUpper(_name_41);
    _builder.append(_firstUpper_24, "\t\t\t\t\t\t\t");
    _builder.append(".MIXload");
    String _name_42 = androidEntity.getName();
    String _firstUpper_25 = StringExtensions.toFirstUpper(_name_42);
    _builder.append(_firstUpper_25, "\t\t\t\t\t\t\t");
    _builder.append("FromBackendByIdAndUpdateToLocalDatabase(");
    String _name_43 = androidEntity.getName();
    _builder.append(_name_43, "\t\t\t\t\t\t\t");
    _builder.append(".getId(), context, new IReturnValueCallback<");
    String _name_44 = androidEntity.getName();
    String _firstUpper_26 = StringExtensions.toFirstUpper(_name_44);
    _builder.append(_firstUpper_26, "\t\t\t\t\t\t\t");
    _builder.append(">() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("public void onComplete(");
    String _name_45 = androidEntity.getName();
    String _firstUpper_27 = StringExtensions.toFirstUpper(_name_45);
    _builder.append(_firstUpper_27, "\t\t\t\t\t\t\t\t\t\t");
    _builder.append(" entity, int statusCode, String errorMessage) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, Constants.UPDATE_SUCCESSFUL);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(-1,\terrorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, errorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* BACKEND UND LOKALE DATENBANK: Methode zum Löschen des Image mit Namen \"");
    String _name_46 = attribute.getName();
    _builder.append(_name_46, " ");
    _builder.append("\" ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* Wenn Löschen im Backend erfolgreich war, dann wird in der lokalen Datenbank die Entity upgedatet");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* (das ImageProperty wird entfernt).");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ACHTUNG: Es sollte sichergestellt sein, dass die Entity schon in der lokalen Datenbank vorhanden");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ist. Ansonsten kommt es zu Fehlern und das Image wird nur im Backend gespeichert. ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* BACKEND-ENDPUNKT: /api/{appname}/entities/{id}/image/{property}");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param context ApplicationContext der Actitivity, von der aus diese");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*            Methode aufgerufen wird; wird für das Öffnen, Lesen und Verändern der DB benötigt");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param callback Callback zum Abfragen von Fehlern und des Http-Response-StatusCode");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("@JsonIgnore");
    _builder.newLine();
    _builder.append("public void MIXdeleteImage");
    String _name_47 = attribute.getName();
    String _firstUpper_28 = StringExtensions.toFirstUpper(_name_47);
    _builder.append(_firstUpper_28, "");
    _builder.append("FromBackendAndUpdateLocalDatabase(final Context context, final INoReturnValueCallback callback){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final ");
    String _name_48 = androidEntity.getName();
    String _firstUpper_29 = StringExtensions.toFirstUpper(_name_48);
    _builder.append(_firstUpper_29, "\t");
    _builder.append(" ");
    String _name_49 = androidEntity.getName();
    _builder.append(_name_49, "\t");
    _builder.append(" = this;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_50 = androidEntity.getName();
    String _firstUpper_30 = StringExtensions.toFirstUpper(_name_50);
    _builder.append(_firstUpper_30, "\t");
    _builder.append("PersistenceWrapper.delete");
    String _name_51 = androidEntity.getName();
    String _firstUpper_31 = StringExtensions.toFirstUpper(_name_51);
    _builder.append(_firstUpper_31, "\t");
    _builder.append("Image(this, \"");
    String _name_52 = attribute.getName();
    _builder.append(_name_52, "\t");
    _builder.append("\", new INoReturnValueCallback() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("public void onComplete(int statusCode, String errorMessage) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    String _name_53 = androidEntity.getName();
    String _firstUpper_32 = StringExtensions.toFirstUpper(_name_53);
    _builder.append(_firstUpper_32, "\t\t\t\t\t\t\t");
    _builder.append(".MIXload");
    String _name_54 = androidEntity.getName();
    String _firstUpper_33 = StringExtensions.toFirstUpper(_name_54);
    _builder.append(_firstUpper_33, "\t\t\t\t\t\t\t");
    _builder.append("FromBackendByIdAndUpdateToLocalDatabase(");
    String _name_55 = androidEntity.getName();
    _builder.append(_name_55, "\t\t\t\t\t\t\t");
    _builder.append(".getId(), context, new IReturnValueCallback<");
    String _name_56 = androidEntity.getName();
    String _firstUpper_34 = StringExtensions.toFirstUpper(_name_56);
    _builder.append(_firstUpper_34, "\t\t\t\t\t\t\t");
    _builder.append(">() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("public void onComplete(");
    String _name_57 = androidEntity.getName();
    String _firstUpper_35 = StringExtensions.toFirstUpper(_name_57);
    _builder.append(_firstUpper_35, "\t\t\t\t\t\t\t\t\t\t");
    _builder.append(" entity, int statusCode, String errorMessage) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (NetworkHelper.isStatusCodeBetween200And300(statusCode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, Constants.UPDATE_SUCCESSFUL);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (callback != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(-1,\terrorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("callback.onComplete(statusCode, errorMessage);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
