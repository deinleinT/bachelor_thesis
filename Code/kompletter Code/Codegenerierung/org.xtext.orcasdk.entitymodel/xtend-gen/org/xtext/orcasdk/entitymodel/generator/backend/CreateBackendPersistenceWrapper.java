package org.xtext.orcasdk.entitymodel.generator.backend;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class CreateBackendPersistenceWrapper {
  public static CharSequence compileBackendPersistenceWrapper() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package de.fhws.sdk.orca.persistence.wrapper;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.InputStream;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import android.content.Context;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.image.delete.DeleteEntityImage;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.image.get.GetEntityImage;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.image.get.GetEntityImageByImageLink;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.image.put.Image;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.image.put.PutEntityImage;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.callback.IImageCallback;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.callback.INoReturnValueCallback;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.model.Entity;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.AppConstants;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.entity.delete.DeleteSingleEntityById;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.entity.delete.DeleteSingleEntityProperty;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.entity.delete.DeleteSingleEntityPropertyByEntityId;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.entity.get.GetAllEntitiesIds;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.entity.get.GetEntitiesByAttachedEntity;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.entity.get.GetEntitiesByNavigationLink;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.entity.get.GetEntitiesByQueryString;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.entity.get.GetSingleEntityById;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.entity.get.GetSingleEntityByLink;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.entity.get.GetSingleEntityProperty;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.entity.get.GetSingleEntityPropertyById;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.entity.post.PostSingleEntityWithCheckWhetherEntityStillExists;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.entity.post.PostSingleEntityWithoutCheck;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.entity.put.PutSingleEntity;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.entity.put.PutSingleEntityByEntityId;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.entity.put.PutSingleEntityProperties;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.entity.put.PutSingleEntityPropertiesById;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.link.get.GetObjectEntityByLink;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.callback.IAllEntityIdsCallback;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.callback.IPageCallback;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.callback.IPropertyCallback;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.callback.IReturnValueCallback;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.model.Link;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.entity.get.GetAllEntitiesFromSameLinkType;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.link.delete.DeleteAllLinksOfSameType;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.link.delete.DeleteSingleLink;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.link.delete.DeleteSingleLinkProperty;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.link.get.GetAllLinksFromSameTypeOfAnEntity;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.link.get.GetLinkPageByNavigationLink;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.link.post.PostSingleLink;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.link.post.PostSingleLinkByEntityIds;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.link.post.PostSingleLinkByEntityIdsAndLinkType;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.link.put.PutAdditionalPropertyToLinksOfSameLinkType;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.link.put.PutNewPropertiesToLinksOfSameLinkType;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.asynctask.link.put.PutSingleLinkProperties;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.callback.IEntityPageWithEntityCallback;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.callback.ILinkPageCallback;");
    _builder.newLine();
    _builder.append("import de.fhws.sdk.orca.network.callback.IPostLinkCallback;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class BackendPersistenceWrapper {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Diese Klassenmethode speichert eine übergebene Entity im Backend ab. Vor");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* dem Speichern wird geprüft, ob es evtl. bereits Entitäten gibt, die");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ähnliche Properties haben. Hierbei werden jedoch nur bool, long, double");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* und String (ohne Images!) Properties zur Abfrage verwendet. Wenn es schon");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* eine oder mehrere Entitäten gibt, erfolgt keine Speicherung, über das");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Callback werden in der ErrorMessage die EntityIds angegeben, die im");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Backend schon gespeichert und ähnlich sind. Ansonsten erfolgt eine");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Speicherung der Entity und über das Callback kann diese abgerufen werden.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param entity Die zu speichernde Entity, muss von");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            {@linkplain de.fhws.sdk.orca.model.Entity Entity} erben");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param appName Der individuelle AppName, muss zur Authorisierung");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            angegeben werden");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param apiKey Der individuelle ApiKey, muss zur Authorisierung angegeben");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            werden");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param callback Das Callback, womit die gespeicherte Entity, der");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            http-StatusCode und errorMessages threadsicher abgefragt");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            werden können");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@SuppressWarnings(\"unchecked\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void saveEntityWithCheckWhetherEntityStillExists(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("T entity, IReturnValueCallback<T> callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PostSingleEntityWithCheckWhetherEntityStillExists<T> post = new PostSingleEntityWithCheckWhetherEntityStillExists<T>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("post.execute(entity);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Diese Klassenmethode speichert eine übergebene Entity im Backend ab. Es");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* erfolgt KEINE Prüfung, ob es Entitäten mit ähnlichen Properties schon im");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Backend gibt, es erfolgt gleich eine Speicherung der Entity und über das");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Callback kann diese abgerufen werden.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param entity Die zu speichernde Entity, muss von");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            de.fhws.sdk.orca.model.Entity erben");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param appName Der individuelle AppName, muss zur Authorisierung");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            angegeben werden");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param apiKey Der individuelle ApiKey, muss zur Authorisierung angegeben");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            werden");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param callback Das Callback, womit die gespeicherte Entity, der");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            http-StatusCode und errorMessages threadsicher abgefragt");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            werden können");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@SuppressWarnings(\"unchecked\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void saveEntityWithoutCheck(T entity,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("IReturnValueCallback<T> callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PostSingleEntityWithoutCheck<T> post = new PostSingleEntityWithoutCheck<T>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("post.execute(entity);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Prüft anhand der Properties der übergebenen Entity, ob es ähnliche");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Entitäten schon im Backend gibt. Wenn ja, wird über das Callback eine");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* {@linkplain de.fhws.sdk.orca.model.EntityPage EntityPage} mit allen");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* gefundenen Entitäten abrufbar.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param entity Anhand deren Properties erfolgt die Abfrage");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param appName Der individuelle AppName, muss zur Authorisierung");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            angegeben werden");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param apiKey Der individuelle ApiKey, muss zur Authorisierung angegeben");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            werden");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param callback Das Callback zur Abfrage der EntityPage, des");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            HTTP-StatusCodes und der errorMessage");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@SuppressWarnings(\"unchecked\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void loadEntitiesByAttachedEntity(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("T entity, IPageCallback<T> callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GetEntitiesByAttachedEntity<T> get = new GetEntitiesByAttachedEntity<T>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("get.execute(entity);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Methode zur Abfrage von Entities anhand einer SQL-Query. Der Query-String");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* muss korrekt sein, damit Anfrage erfolgen kann. Nach erfolgter Anfrage");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* kann über das Callback die EntityPage mit den gefundenen Entities");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* abgerufen werden.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param queryString Die abzufragende Query");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param type der EntityType, ist notwendig, sonst keine Abfrage möglich");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param orderBy hier kann ein Property angegeben werden, wonach die");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            Abfrage sortiert wird, es kann auch ein leerer String");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            übergeben werden aber nicht null");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param offset Gibt an, bei welchem Offset die");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            {@linkplain de.fhws.sdk.orca.model.EntityPage EntityPage}");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            beginnen soll");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param size Gibt an, wie groß die");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            {@linkplain de.fhws.sdk.orca.model.EntityPage EntityPage}");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            werden darf.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param der Klassentyp der Entität, die abgefragt werden soll");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param appName Der individuelle AppName, muss zur Authorisierung");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            angegeben werden");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param apiKey Der individuelle ApiKey, muss zur Authorisierung angegeben");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            werden");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param callback Das Callback zur Abfrage der EntityPage, des");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            HTTP-StatusCodes und der errorMessage");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void loadEntitiesByQueryString(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String queryString, long type, String orderBy, int offset,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int size, Class<? extends Entity> classType, IPageCallback<T> callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GetEntitiesByQueryString<T> get = new GetEntitiesByQueryString<T>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("queryString, type, orderBy, offset, size, classType, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("get.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Diese Methode dient dazu, Entities von einem NavigationLink einer");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* EntityPage zu laden. Über ein EntityPageObjekt können mit der Methode");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* getNavigationLinks() alle entsprechenden Links abgerufen werden. Dieser");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Methode ist dann ein einzelner String-Link zu übergeben. Über das");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Callback erhält man die entsprechende neue EntityPage");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param link String eines EntityPage NavigationsLink");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param entityType der EntityType der Entitäten, die über diesen Link");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            abgerufen werden können");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param classType der classType der Entitäten, die über diesen Link");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            abgerufen werden können");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param apiKey der individuelle ApiKey, dient zur Authorisierung");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param callback zum Erhalt der angeforderten EntityPage");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void loadEntitiesByNavigationLink(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String link, Long entityType, Class<? extends Entity> classType, IPageCallback<T> callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GetEntitiesByNavigationLink<T> get = new GetEntitiesByNavigationLink<T>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("link, entityType, classType, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("get.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Methode zum Laden einer Entität anhand eines Links (z.B. selfUrl)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param link String mit dem URL-Link");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param classType der Typ, der von diesem Link angefordert werden soll");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param apiKey für die Authorisierung");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param callback damit kann auf Entity nach dem Laden zugegriffen werden");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void loadEntityByLink(String link,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Class<? extends Entity> classType, IReturnValueCallback<T> callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GetSingleEntityByLink<T> get = new GetSingleEntityByLink<T>(link,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("classType, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("get.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Methode, die es anhand der (vom Backend beim ersten Speichern vergebenen)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* EntityId ermöglicht, die Entity zu laden..");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param id die EntityId, wird beim Speichern im Backend vergeben und ist");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            für jede Entity eindeutig");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param type der EntityType");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param classType der ClassType der entsprechenden Entity");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param appName wird für die Authorisierung benötigt");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param apiKey wird für die Authorisierung benötigt");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param callback Callback zum threadsicheren Zugriff auf die geladene");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            Entity");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void loadEntityById(int id, long type,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Class<? extends Entity> classType, IReturnValueCallback<T> callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GetSingleEntityById<T> get = new GetSingleEntityById<T>(id, type,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("classType, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("get.execute();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@SuppressWarnings(\"unchecked\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void loadSingleEntityProperty(T entity,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String propertyName, IPropertyCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GetSingleEntityProperty<T> get = new GetSingleEntityProperty<T>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("propertyName, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("get.execute(entity);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void loadSingleEntityPropertyById(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int entityId, String propertyName, IPropertyCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GetSingleEntityPropertyById<T> get = new GetSingleEntityPropertyById<T>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("entityId, propertyName, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("get.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@SuppressWarnings(\"unchecked\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void deleteSingleEntityProperty(T entity,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String propertyName, INoReturnValueCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DeleteSingleEntityProperty<T> delete = new DeleteSingleEntityProperty<T>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("propertyName, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("delete.execute(entity);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void deleteSingleEntityPropertyByEntityId(int entityId,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String propertyName, INoReturnValueCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DeleteSingleEntityPropertyByEntityId delete = new DeleteSingleEntityPropertyByEntityId(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("entityId, propertyName, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("delete.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void deleteEntityById(int id,INoReturnValueCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DeleteSingleEntityById delete = new DeleteSingleEntityById(id, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("delete.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Methode zum updaten einer Entity im Backend. Die originalEntity wird mit");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* der newEntity ersetzt.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param originalEntity die zu ersetzende Entity, WICHTIG: Die entityId");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            muss gesetzt und korrekt sein!");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param newEntity mit dieser Entity wird die originalEntity ersetzt");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param appName zur Authorisierung");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param apiKey zur Authorisierung");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param callback für");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@SuppressWarnings(\"unchecked\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void updateEntityWithNewEntity(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("T originalEntity, T newEntity, INoReturnValueCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PutSingleEntity<T> put = new PutSingleEntity<T>(originalEntity,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("newEntity, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("put.execute(originalEntity);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Methode zum updaten einer Entity im Backend. Die originalEntity wird mit");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* der newEntity ersetzt.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param entityIdOfOriginalEntity die EntityId der zu ersetzenden Entity");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param newEntity mit dieser Entity wird die originalEntity ersetzt");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param appName zur Authorisierung");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param apiKey zur Authorisierung");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param callback für");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void updateEntityByEntityIdWithNewEntity(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int entityIdOfOriginalEntity, T newEntity, INoReturnValueCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PutSingleEntityByEntityId<T> put = new PutSingleEntityByEntityId<T>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("entityIdOfOriginalEntity, newEntity, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("put.execute();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Methode zum Updaten der Properties. Aktualisiert die Properties im");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Backend und im übergebenen Objekt. WICHTIG: Es können nur Properties");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* geupdatet werden, die in der ursprünglichen Entity schon vorhanden sind.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param entity Objekt der Entität, deren Properties aktualisiert werden");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            sollen.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param newProperties die neuen Properties, es dürfen nur bereits");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*            vorhandene Properties aktualisiert werden");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param appName zur Authorisierung");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param apiKey zur Authorisierung");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param callback für");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@SuppressWarnings(\"unchecked\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void updateEntityWithNewProperties(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("T entity, HashMap<String, Object> newProperties, INoReturnValueCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PutSingleEntityProperties<T> put = new PutSingleEntityProperties<T>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("newProperties, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("put.execute(entity);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void updateEntityWithNewPropertiesByEntityId(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int entityId, HashMap<String, Object> newProperties, INoReturnValueCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PutSingleEntityPropertiesById put = new PutSingleEntityPropertiesById(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("entityId, newProperties, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("put.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void loadObjectEntityByLink(int entityId,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int objectId, String linkType,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Class<? extends Entity> classTypeOfObject, IReturnValueCallback<T> callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GetObjectEntityByLink<T> get = new GetObjectEntityByLink<T>(entityId,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("objectId, linkType, classTypeOfObject, AppConstants.APPNAME, AppConstants.APIKEY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("get.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void loadAllEntitiesFromSameType(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("long type, String orderBy, int offset, int size,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Class<? extends Entity> classType, IPageCallback<T> callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GetEntitiesByQueryString<T> get = new GetEntitiesByQueryString<T>(\"\",");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("type, orderBy, offset, size, classType, AppConstants.APPNAME, AppConstants.APIKEY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("get.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void loadAllEntitiesIds(Long type,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Class<? extends Entity> classType, IAllEntityIdsCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GetAllEntitiesIds<T> get = new GetAllEntitiesIds<T>(type, classType,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("get.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void saveLink(T entityOne, T entityTwo,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Link link, IPostLinkCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PostSingleLink<T> post = new PostSingleLink<T>(link, entityOne,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("entityTwo, AppConstants.APPNAME, AppConstants.APIKEY,callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("post.execute();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void saveLinkByEntityIds(int entityId, int objectId,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Link link, IPostLinkCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PostSingleLinkByEntityIds post = new PostSingleLinkByEntityIds(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("entityId, objectId, link, AppConstants.APPNAME, AppConstants.APIKEY,callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("post.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void saveLinkByEntityIdsAndLinkType(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int entityId, int objectId, T entity, String linkType, IPostLinkCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PostSingleLinkByEntityIdsAndLinkType<T> post = new PostSingleLinkByEntityIdsAndLinkType<T>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("entityId, objectId, entity, linkType, AppConstants.APPNAME, AppConstants.APIKEY,callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("post.execute();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void updateSingleLinkProperties(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int entityId, int objectId, String linkType,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("HashMap<String, Object> newProperties, T entity, INoReturnValueCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PutSingleLinkProperties<T> put = new PutSingleLinkProperties<T>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("entityId, objectId, linkType, entity, newProperties, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("put.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void updateAllLinkPropertiesOfSameLinkType(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int entityId, String linkType, T entity,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("HashMap<String, Object> newLinkProperties, INoReturnValueCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PutNewPropertiesToLinksOfSameLinkType<T> put = new PutNewPropertiesToLinksOfSameLinkType<T>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("entityId, linkType, entity, newLinkProperties, AppConstants.APPNAME, AppConstants.APIKEY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("put.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void deleteSingleLink(int entityId,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int objectId, String linkType, T entity, INoReturnValueCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DeleteSingleLink<T> delete = new DeleteSingleLink<T>(entityId,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("objectId, linkType, entity, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("delete.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void deleteAllLinkPropertiesOfSameLinkType(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int entityId, String linkType, T entity, INoReturnValueCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DeleteAllLinksOfSameType<T> delete = new DeleteAllLinksOfSameType<T>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("entityId, linkType, entity, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("delete.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void deleteSingleLinkPropertyOfSameLinkType(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int entityId, int objectId, String linkType, T entity,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String propertyNameToDelete, INoReturnValueCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DeleteSingleLinkProperty<T> delete = new DeleteSingleLinkProperty<T>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("entityId, objectId, linkType, entity, propertyNameToDelete,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("delete.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void updateLinkPropertyAddAditionalProperties(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int entityId, int objectId, String linkType, T entity,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("HashMap<String, Object> newLinkProperties, INoReturnValueCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PutAdditionalPropertyToLinksOfSameLinkType<T> put = new PutAdditionalPropertyToLinksOfSameLinkType<T>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("entityId, objectId, linkType, entity, newLinkProperties,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("put.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void loadAllLinksFromSameTypeOfAnEntity(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("T entity, String linkType, ILinkPageCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GetAllLinksFromSameTypeOfAnEntity<T> get = new GetAllLinksFromSameTypeOfAnEntity<T>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("entity, linkType, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("get.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void loadLinksByEntityPageNavigationLink(String navLink, ILinkPageCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GetLinkPageByNavigationLink get = new GetLinkPageByNavigationLink(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("navLink, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("get.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@SuppressWarnings({\"rawtypes\", \"unchecked\"})");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static <T extends Entity> void loadEntitiesFromTheSameLinkType(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int entityId, String linkType, IEntityPageWithEntityCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GetAllEntitiesFromSameLinkType<T> get = new GetAllEntitiesFromSameLinkType<T>(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("entityId, linkType, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("get.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void saveOrUpdateEntityImageByIntRessource(int entityId,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String imagePropertyName, Context context, int ressourceOfImage,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("INoReturnValueCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Image image = new Image(context, ressourceOfImage);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PutEntityImage put = new PutEntityImage(entityId, imagePropertyName,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("image, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("put.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void saveOrUpdateEntityImageByInputStream(int entityId,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String imagePropertyName, Context context, InputStream inputStream, INoReturnValueCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Image image = new Image(context, inputStream);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PutEntityImage put = new PutEntityImage(entityId, imagePropertyName,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("image, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("put.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void deleteEntityImage(int entityId,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String imagePropertyName, INoReturnValueCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DeleteEntityImage delete = new DeleteEntityImage(entityId,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("imagePropertyName, AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("delete.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void loadEntityImage(int entityId, String imagePropertyName,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int width, int height, int radius, String backgroundColor, IImageCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GetEntityImage get = new GetEntityImage(entityId, imagePropertyName,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("width, height, radius, backgroundColor, AppConstants.APPNAME, AppConstants.APIKEY,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("get.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void loadEntityImageByImageLink(String imagePropertyLink,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int width, int height, int radius, String backgroundColor, IImageCallback callback) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GetEntityImageByImageLink get = new GetEntityImageByImageLink(");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("imagePropertyLink, width, height, radius, backgroundColor,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("AppConstants.APPNAME, AppConstants.APIKEY, callback);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("get.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
